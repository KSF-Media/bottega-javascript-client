/**
 * Bottega
 * KSF Media's orders service
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreditCard', 'model/CreditCardRegister', 'model/InlineResponse400', 'model/InlineResponse415'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreditCard'), require('../model/CreditCardRegister'), require('../model/InlineResponse400'), require('../model/InlineResponse415'));
  } else {
    // Browser globals (root is window)
    if (!root.Bottega) {
      root.Bottega = {};
    }
    root.Bottega.PaymentMethodsApi = factory(root.Bottega.ApiClient, root.Bottega.CreditCard, root.Bottega.CreditCardRegister, root.Bottega.InlineResponse400, root.Bottega.InlineResponse415);
  }
}(this, function(ApiClient, CreditCard, CreditCardRegister, InlineResponse400, InlineResponse415) {
  'use strict';

  /**
   * PaymentMethods service.
   * @module api/PaymentMethodsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PaymentMethodsApi. 
   * @alias module:api/PaymentMethodsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the paymentMethodCreditCardGet operation.
     * @callback module:api/PaymentMethodsApi~paymentMethodCreditCardGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreditCard>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credit cards of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/PaymentMethodsApi~paymentMethodCreditCardGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreditCard>}
     */
    this.paymentMethodCreditCardGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = [CreditCard];
      return this.apiClient.callApi(
        '/paymentMethod/creditCard', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodCreditCardIdDelete operation.
     * @callback module:api/PaymentMethodsApi~paymentMethodCreditCardIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a credit card
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/PaymentMethodsApi~paymentMethodCreditCardIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.paymentMethodCreditCardIdDelete = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentMethodCreditCardIdDelete");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = [Object];
      return this.apiClient.callApi(
        '/paymentMethod/creditCard/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodCreditCardIdGet operation.
     * @callback module:api/PaymentMethodsApi~paymentMethodCreditCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a credit card
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/PaymentMethodsApi~paymentMethodCreditCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCard}
     */
    this.paymentMethodCreditCardIdGet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentMethodCreditCardIdGet");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = CreditCard;
      return this.apiClient.callApi(
        '/paymentMethod/creditCard/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodCreditCardIdRegisterNumberGet operation.
     * @callback module:api/PaymentMethodsApi~paymentMethodCreditCardIdRegisterNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCardRegister} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of a register operation for a credit card
     * @param {Number} id 
     * @param {String} _number 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/PaymentMethodsApi~paymentMethodCreditCardIdRegisterNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCardRegister}
     */
    this.paymentMethodCreditCardIdRegisterNumberGet = function(id, _number, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentMethodCreditCardIdRegisterNumberGet");
      }
      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling paymentMethodCreditCardIdRegisterNumberGet");
      }

      var pathParams = {
        'id': id,
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = CreditCardRegister;
      return this.apiClient.callApi(
        '/paymentMethod/creditCard/{id}/register/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodCreditCardIdRegisterPost operation.
     * @callback module:api/PaymentMethodsApi~paymentMethodCreditCardIdRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCardRegister} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a credit card with payment provider, to replace an existing card
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/PaymentMethodsApi~paymentMethodCreditCardIdRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCardRegister}
     */
    this.paymentMethodCreditCardIdRegisterPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentMethodCreditCardIdRegisterPost");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = CreditCardRegister;
      return this.apiClient.callApi(
        '/paymentMethod/creditCard/{id}/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodCreditCardIdSubscriptionPut operation.
     * @callback module:api/PaymentMethodsApi~paymentMethodCreditCardIdSubscriptionPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change credit card for subscriptions associated with a given credit card
     * @param {Number} id 
     * @param {Number} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/PaymentMethodsApi~paymentMethodCreditCardIdSubscriptionPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.paymentMethodCreditCardIdSubscriptionPut = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentMethodCreditCardIdSubscriptionPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentMethodCreditCardIdSubscriptionPut");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=utf-8'];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = [Object];
      return this.apiClient.callApi(
        '/paymentMethod/creditCard/{id}/subscription', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodCreditCardRegisterPost operation.
     * @callback module:api/PaymentMethodsApi~paymentMethodCreditCardRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCardRegister} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a credit card with payment provider
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/PaymentMethodsApi~paymentMethodCreditCardRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCardRegister}
     */
    this.paymentMethodCreditCardRegisterPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json;charset=utf-8'];
      var returnType = CreditCardRegister;
      return this.apiClient.callApi(
        '/paymentMethod/creditCard/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodCreditCardRegisterProcessGet operation.
     * @callback module:api/PaymentMethodsApi~paymentMethodCreditCardRegisterProcessGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Callback for processing a registered credit card
     * @param {Object} opts Optional parameters
     * @param {String} opts.transactionId 
     * @param {String} opts.responseCode 
     * @param {module:api/PaymentMethodsApi~paymentMethodCreditCardRegisterProcessGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.paymentMethodCreditCardRegisterProcessGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'transactionId': opts['transactionId'],
        'responseCode': opts['responseCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/html;charset=utf-8'];
      var returnType = 'String';
      return this.apiClient.callApi(
        '/paymentMethod/creditCard/register/process', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
