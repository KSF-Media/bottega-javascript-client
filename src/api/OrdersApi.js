/**
 * Bottega
 * KSF Media's orders service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BuyingOption from '../model/BuyingOption';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse415 from '../model/InlineResponse415';
import Order from '../model/Order';

/**
* Orders service.
* @module api/OrdersApi
* @version 1.0.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the orderOrderNumberGet operation.
     * @callback module:api/OrdersApi~orderOrderNumberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch order by UUID
     * @param {String} orderNumber 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/OrdersApi~orderOrderNumberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    orderOrderNumberGet(orderNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderNumber' is set
      if (orderNumber === undefined || orderNumber === null) {
        throw new Error("Missing the required parameter 'orderNumber' when calling orderOrderNumberGet");
      }

      let pathParams = {
        'orderNumber': orderNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/order/{orderNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrderNumberPayPost operation.
     * @callback module:api/OrdersApi~orderOrderNumberPayPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pay for an Order, marking it as ready for processing
     * @param {String} orderNumber 
     * @param {String} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/OrdersApi~orderOrderNumberPayPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    orderOrderNumberPayPost(orderNumber, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'orderNumber' is set
      if (orderNumber === undefined || orderNumber === null) {
        throw new Error("Missing the required parameter 'orderNumber' when calling orderOrderNumberPayPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderOrderNumberPayPost");
      }

      let pathParams = {
        'orderNumber': orderNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/order/{orderNumber}/pay', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderPost operation.
     * @callback module:api/OrdersApi~orderPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Order
     * @param {module:model/BuyingOption} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authUser 
     * @param {String} opts.authorization 
     * @param {module:api/OrdersApi~orderPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    orderPost(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'AuthUser': opts['authUser'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderProcessOrderGet operation.
     * @callback module:api/OrdersApi~orderProcessOrderGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handles Nets payment response
     * @param {Object} opts Optional parameters
     * @param {String} opts.processAuthToken 
     * @param {String} opts.transactionId 
     * @param {String} opts.responseCode 
     * @param {module:api/OrdersApi~orderProcessOrderGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    orderProcessOrderGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'processAuthToken': opts['processAuthToken'],
        'transactionId': opts['transactionId'],
        'responseCode': opts['responseCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain;charset=utf-8'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/order/processOrder', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
